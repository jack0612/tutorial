1) .antMatchers("/**").permitAll()	//antPattern “/**” means all routes at the current and nested levels,
	        								//We instruct Spring Security to allow any type of access 
	        								//by using permitAll() method,
2)The httpBasic() method enables the Basic HTTP security in our application.
3)https://kostis.hashnode.dev/csrf-configuration-for-angular-spring-boot-application
 @Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Bean
  public CsrfTokenRepository csrfTokenRepository() {
    CookieCsrfTokenRepository repository = CookieCsrfTokenRepository.withHttpOnlyFalse();
    repository.setCookiePath("/");
    return repository;
  }

  @Override
  protected void configure(HttpSecurity httpSecurity) throws Exception {
    httpSecurity.csrf().csrfTokenRepository(csrfTokenRepository());
    // Rest of security configuration
  }
}
4. 	 https://medium.com/@thecodinganalyst/configure-spring-security-csrf-for-testing-on-swagger-e9e6461ee0c1
spring boot 3 security

5. swagger
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.0.0</version>
		</dependency>
http://localhost:8083/swagger-ui/index.html

6. https://reflectoring.io/spring-boot-web-controller-test/
	@WebMvcTest 
	annotation to fire up an application context that contains only the beans needed for testing 
	a web controller:
	
	 UserResource user = new UserResource("Zaphod", "zaphod@galaxy.net");
  
   mockMvc.perform(post("/forums/{forumId}/register", 42L)
        .contentType("application/json")
        .param("sendWelcomeMail", "true")
        .content(objectMapper.writeValueAsString(user)))
        .andExpect(status().isOk());

7.https://stackoverflow.com/questions/59044876/whats-the-different-between-oauth2login-and-oauth2client-what-are-the-use-case
oauth2Login() will authenticate the user with OAuth2 (or OIDC), populating Spring's Principal with the information
 from either the JWT or the userInfo endpoint. 
 oauth2Client() won't authenticate the user but will seek permission from the OAuth2 authorization server for the resources 
 (scopes) it needs to access. With oauth2Client() you'll still need to authenticate the user, for example via formLogin().
	  