 
spring.security.user.name=foo
spring.security.user.password=foo

server.port=8089


spring.datasource.url=jdbc:mysql://localhost:3306/db_example
spring.datasource.username=root
spring.datasource.password=Wsxdr11!@#$
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true
spring.datasource.data= data.sql
#By default, data.sql scripts get executed before the Hibernate is initialized. We need 
#Hibernate to create our tables before inserting the data into them. To achieve this, we need to defer the initialization of our data source. 
#spring.jpa.defer-datasource-initialization=true

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql= true
spring.jpa.properties.hibernate.format_sql= true
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE

#https://medium.com/@thecodinganalyst/configure-spring-security-csrf-for-testing-on-swagger-e9e6461ee0c1
# swagger will add the X-XSRF-TOKEN in the header with the value of the token from the cookie XSRF-TOKEN.
springdoc.swagger-ui.csrf.enabled=true 
logging.level.org.springframework.security.web.csrf=trace


#WebClient unit test
twilio-api.base-url= https://api.twilio.com/2010-04-01
twilio-api.account-sid: random-account-sid